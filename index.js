const fs = require('fs');
const path = require('path');
const { TelegramClient } = require('telegram');
const { StringSession } = require('telegram/sessions');
const { NewMessage } = require('telegram/events');
const input = require('input');

const apiId = 22009789; // –≤–∞—à API ID
const apiHash = '320581df07b95ea18333cd10f41b92cd'; // –≤–∞—à API HASH
const sessionFilePath = path.join(__dirname, 'session.txt');

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Å—Å–∏—é –∏–∑ —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
let sessionString = '';
if (fs.existsSync(sessionFilePath)) {
  sessionString = fs.readFileSync(sessionFilePath, 'utf8');
}
const stringSession = new StringSession(sessionString);

// –ß–∞—Ç—ã –∏, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –∏—Ö —Ç–æ–ø–∏–∫–∏
// –µ—Å–ª–∏ –¥–ª—è —á–∞—Ç–∞ –º–∞—Å—Å–∏–≤ –ø—É—Å—Ç–æ–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
const monitoredSources = {
  // '2863458813': [2], // —Ç–æ–ª—å–∫–æ —Ç–æ–ø–∏–∫–∏
  '1779588634': [45042], // —Ç–æ–ª—å–∫–æ —Ç–æ–ø–∏–∫–∏
  '1616204072': undefined, // ùòΩùôöùôßùô°ùôûùô£ ùô•ùôñùôßùôñùôôùôûùô®ùôöüéº–ß–ê–¢ –ë–ï–†–õ–ò–ù
  '2137211488': undefined, // Svoi.Berlin
  '1589772550': undefined, // Berlin helps Ukrainians
  '1641170995': [56554, 56738], // –î–æ—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ì–µ—Ä–º–∞–Ω–∏–∏/Alles
  '1221376441': undefined, // –ì–µ—Ä–º–∞–Ω–∏—è –ë–µ—Ä–ª–∏–Ω –ß–∞—Ç
  '2360167407': undefined, // –£–ö–†–ê–ò–ù–¶–´ –í –ë–ï–†–õ–ò–ù–ï | –ß–ê–¢üá©üá™
  '1752185026': undefined, // –ë–µ—Ä–ª–∏–Ω –Ω–æ–≤–æ—Å—Ç–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ì–µ—Ä–º–∞–Ω–∏—è
  '1394981443': undefined, // –ë–µ—Ä–ª–∏–Ω —á–∞—Ç–∏–∫ üá©üá™ | CHATIK
  // '-1002633667190': [],         // –≤–µ—Å—å —á–∞—Ç, –≤—Å–µ —Ç–æ–ø–∏–∫–∏
  '2633667190': undefined,  // –≤–µ—Å—å —á–∞—Ç (–±–µ–∑ —Ç–æ–ø–∏–∫–æ–≤ –∏–ª–∏ –ª—é–±—ã–µ)
};


const targetChatId = -1002694799076; // —á–∞—Ç –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏

function loadWordList(filePath) {
  try {
    const data = fs.readFileSync(filePath, 'utf8');
    return data
      .split('\n')
      .map(line => line.trim().toLowerCase())
      .filter(line => line && !line.startsWith('#'));
  } catch (err) {
    console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å ${filePath}:`, err.message);
    return [];
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–æ–≤
const keywords = loadWordList(path.join(__dirname, 'keywords.txt'));
const blacklist = loadWordList(path.join(__dirname, 'blacklist.txt'));

function messageMatches(text) {
  const lowered = text.toLowerCase();
  const hasKeyword = keywords.some(word => lowered.includes(word));
  const hasBlacklisted = blacklist.some(word => lowered.includes(word));
  return hasKeyword && !hasBlacklisted;
}

function getThreadId(message) {
  return (
    message.forumTopicId ??
    message.replyTo?.forumTopicId ??
    message.replyToMsgId ??
    message.replyToTopMsgId ??
    message.threadId ??
    null
  );
}

(async () => {
  const client = new TelegramClient(stringSession, apiId, apiHash, {
    connectionRetries: 5,
  });

  await client.start({
    phoneNumber: async () => await input.text('üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: '),
    password: async () => await input.text('üîê –ü–∞—Ä–æ–ª—å (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ 2FA): '),
    phoneCode: async () => await input.text('üí¨ –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram: '),
    onError: (err) => console.error(err),
  });


  console.log('‚úÖ Telegram –∫–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω!');
  console.log('üßæ –í–∞—à–∞ —Å–µ—Å—Å–∏—è:', client.session.save());

  fs.writeFileSync(sessionFilePath, client.session.save());


  client.addEventHandler(async (event) => {
    const message = event.message;
    if (!message || !message.message) return;

    const chat = await message.getChat();
    const chatId = chat.id.toString();


    // –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —ç—Ç–æ—Ç —á–∞—Ç
    if (!monitoredSources.hasOwnProperty(chatId)) return;

    const allowedThreads = monitoredSources[chatId];
    const threadId = getThreadId(message);


    if (Array.isArray(allowedThreads) && allowedThreads.length > 0) {
      if (!threadId || !allowedThreads.includes(threadId)) return;
    }

    const text = message.message;
    if (!text) return;

    if (messageMatches(text)) {
      try {
        await client.forwardMessages(targetChatId, {
          messages: [message.id],
          fromPeer: chat,
        });
        console.log(`üì§ –ü–µ—Ä–µ—Å–ª–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ ${chatId}${threadId ? `, thread ${threadId}` : ''}`);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏:', error);
      }
    }
  }, new NewMessage({}));

})();
